using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Xml;
using HtmlAgilityPack;
using System.Text.RegularExpressions; 
using System.Net;
using LinqToTwitter;
using System.Configuration;
using System.Threading.Tasks;
using System.Data;
using System.Data.SqlClient;

public partial class app_communicators_profileedit : System.Web.UI.Page
{
    AspNetAuthorizer auth;
    HttpCookie iDecodeCookie = new HttpCookie("idecode");
    string sTwitterProfileImageURL = "";

    protected async void Page_Load(object sender, EventArgs e)
    {
        if (Session["iUserID"] == null) { Response.Redirect("~/app/login.aspx", true); }
        if (Request.Cookies["idecode"] != null)
        {
            if (Request.Cookies["idecode"]["uid"] != null)
            {
                Session["iUserID"] = Convert.ToInt32(Request.Cookies["idecode"]["uid"]);
            }
            //Response.Redirect("~/app/journo/profile.aspx", false);
        }

        var oDecode = new za.co.idecode.test.idecode();
        XmlNode XmlResult = oDecode.LoadUser(Convert.ToInt16(Session["iUserID"].ToString()), "");
        string sFirstName = "", sLastName = "", sCurrentCity = "", sContactMobile = "", sContactOffice = "", sFaxNumber = "", sEmailAddress = "", sWebsiteAddress = "", sFacebookUsername = "", sTwitterUsername = "", sLinkedInUsername = "", sImageFormat = "", sTwitterProfileImageURL = "", sShortBiography = "", sBiography = "", sCurrentJobTitle = "", sCurrentJobPublication = "";
        string sPassword = "", sTwitterOauthToken = "", sTwitterOauthTokenSecret = "", sTwitterScreenName = "";
        int iUserID = 0, iGenderID = 0, iAge = 0, iCountryID = 0, iUserTypeID = 0;
        ulong iTwitterUserID = 0;
        bool bActive = false;
        DateTime dLastUpdateddate = DateTime.Now, dDateTimeStamp = DateTime.Now;


        foreach (XmlNode Nodes in XmlResult)
        {
            iUserID = Convert.ToInt16(Nodes["userid"].InnerText);
            sFirstName = Nodes["firstname"].InnerText;
            sLastName = Nodes["lastname"].InnerText;
            iGenderID = Convert.ToInt16(Nodes["genderid"].InnerText); 
            iAge = Convert.ToInt16(Nodes["age"].InnerText);
            sCurrentCity = Nodes["currentcity"].InnerText;
            iCountryID = Convert.ToInt16(Nodes["countryid"].InnerText);            
            sContactMobile = Nodes["contactmobile"].InnerText;
            sContactOffice = Nodes["contactoffice"].InnerText;
            sFaxNumber = Nodes["faxnumber"].InnerText;
            sEmailAddress = Nodes["emailaddress"].InnerText;
            sPassword = Nodes["password"].InnerText;
            sWebsiteAddress = Nodes["websiteaddress"].InnerText;
            bActive = Convert.ToBoolean(Nodes["active"].InnerText);
            dDateTimeStamp = Convert.ToDateTime(Nodes["datetimestamp"].InnerText);
            dLastUpdateddate = Convert.ToDateTime(Nodes["lastupdateddate"].InnerText);
            iUserTypeID = Convert.ToInt32(Nodes["usertypeid"].InnerText);
            sFacebookUsername = Nodes["facebookusername"].InnerText;
            sTwitterUsername = Nodes["twitterusername"].InnerText;
            sLinkedInUsername = Nodes["linkedinusername"].InnerText;                        
            sImageFormat = Nodes["imageformat"].InnerText;
            sTwitterOauthToken = Nodes["twitteroauthtoken"].InnerText;
            sTwitterOauthTokenSecret = Nodes["twitteroauthtokensecret"].InnerText;
            sTwitterScreenName = Nodes["twitterscreenname"].InnerText;
            sTwitterProfileImageURL = Nodes["twitterprofileimageurl"].InnerText;
            iTwitterUserID = Convert.ToUInt64(Nodes["twitteruserid"].InnerText);
            sTwitterProfileImageURL = Nodes["twitterprofileimageurl"].InnerText;                  
            sShortBiography = Nodes["shortbiography"].InnerText;
            sBiography = Nodes["biography"].InnerText;
            sCurrentJobTitle = Nodes["currentjobtitle"].InnerText;
            sCurrentJobPublication = Nodes["currentjobpublication"].InnerText;
        }

        var oUser = new User(iUserID, "");

        if (oUser.TwitterUserID == null || oUser.TwitterUserID == 0)
        {
            divAuthTwitter.Visible = true;
        }
        else
        {
            litTwitterScreen.Text = oUser.TwitterScreenName;
            divAuthTwitter.Visible = false;
        }

        this.Page.Title = "iDecode | Manage Communication Officer Profile - " + sFirstName + " " + sLastName;

        if (sTwitterProfileImageURL != "")
        {
            divProfileImage.Style.Add("background-image", "url('" + sTwitterProfileImageURL + "')");
            divAuthTwitterProfileImage.Style.Add("background-image", "url('" + sTwitterProfileImageURL + "')");
        }
        else if (sImageFormat != "")
        {
            divProfileImage.Style.Add("background-image", "url('../images/profileimages/" + Session["iUserID"].ToString() + "." + sImageFormat + "')");
            divAuthTwitterProfileImage.Style.Add("background-image", "url('../images/profileimages/" + Session["iUserID"].ToString() + "." + sImageFormat + "')");
        }
        else {
            divProfileImage.Style.Add("background-image", "url('../images/profileimages/0.png')");
            divAuthTwitterProfileImage.Style.Add("background-image", "url('../images/profileimages/0.png')");
        }

        litFirstName.Text = sFirstName + " "+ sLastName;
        litCurrentCity.Text = sCurrentCity + ", South Africa <br />";
        if (sCurrentCity == "")
        {
            litCurrentCity.Visible = false;
        }
        litAge.Text = iAge.ToString() + ",&nbsp; years old <br />";
        if (iAge == 0)
        {
            litAge.Visible = false;
        }
        litGender.Text = iGenderID == 1 ? "Male" : "Female" + "<br />";
        if (iGenderID == 0)
        {
            litGender.Visible = false;
        }
        litWebsiteAddress.Text = sWebsiteAddress + "<br />";
        if (sWebsiteAddress == "")
        {
            litWebsiteAddress.Visible = false;
        }
        litCurrentJobPublication.Text = sCurrentJobPublication;
        litCurrentJobTitle.Text = sCurrentJobTitle;

        aTwitterShare.HRef = "https://twitter.com/intent/tweet?related=Decode Media&text=" + sFirstName + " " + sLastName;
        aFacebookShare.HRef = "https://www.facebook.com/sharer/sharer.php?u=http://test.idecode.co.za/";
        aLinkedInShare.HRef = "http://www.linkedin.com/shareArticle?mini=true&url=http%3A//muckrack.com/CassandraVinograd&title=Cassandra%20Vinograd%27s%20Muck%20Rack%20portfolio&summary=Cassandra%20Vinograd%27s%20Muck%20Rack%20profile&source=";

        aProfileSocialButtonFacebook.HRef = "https://" + sFacebookUsername;
        aProfileSocialButtonTwitter.HRef = "https://" + sTwitterUsername;
        aProfileSocialButtonLinkedIn.HRef = "https://" + sLinkedInUsername;
        aProfileSocialButtonWebsite.HRef = "http://" + sWebsiteAddress;
        aProfileSocialButtonEmail.HRef = "mailto:" + sEmailAddress;

        if (!IsPostBack) {
            //Bio and Title
            txtFirstName.Text = sFirstName;
            txtLastName.Text = sLastName;
            txtAge.Text = Convert.ToString(iAge);
            txtCurrentCity.Text = sCurrentCity;
            txtOneLineBio.Text = sShortBiography;
            txtLongBiography.Text = sBiography;
            txtCurrentJobTitle.Text = sCurrentJobTitle;
            txtCurrentJobPublication.Text = sCurrentJobPublication;

            //Social Links
            txtTwitterURL.Text = sTwitterUsername;
            txtFacebookURL.Text = sFacebookUsername;
            txtLinkedInURL.Text = sLinkedInUsername;

            txtMobileNumber.Text = sContactMobile;
            txtOfficeNumber.Text = sContactOffice;
            txtEmailAddress.Text = sEmailAddress;
            txtFaxNumber.Text = sFaxNumber;
            txtWebsiteAddress.Text = sWebsiteAddress;
        } 

        //Get UserArticles
        //XmlResult = oDecode.LoadUserArticles(Convert.ToInt16(Session["iUserID"].ToString()));
        XmlDocument doc = new XmlDocument();
        string s = Convert.ToString(oDecode.LoadUserArticles(Convert.ToInt16(Session["iUserID"].ToString())).InnerXml);
        doc.LoadXml(s);

        XmlDataSource xDataSource = new XmlDataSource();
        xDataSource.Data = doc.OuterXml;
        xDataSource.DataBind();
        xDataSource.ID = "XmlSource1";

        dsUserArticles.Data = xDataSource.Data;
        dsUserArticles.DataBind();

        auth = new AspNetAuthorizer
        {
            CredentialStore = new SessionStateCredentialStore()
            {
                ConsumerKey = "qZiQkW4Ul6FkV6APm1m2mIOze",
                ConsumerSecret = "FfmwwIRFgNpY6Kycyb313M4VeEk9R4CLtrqIGIBw1BxENou6V0"
            },
            GoToTwitterAuthorization = twitterUrl => Response.Redirect(twitterUrl, false)
        };

        var twitterCtx = new TwitterContext(auth);
        var credentials = auth.CredentialStore;

        if (!Page.IsPostBack && Request.QueryString["oauth_token"] != null)
        {

            await auth.CompleteAuthorizeAsync(Request.Url);

            string oauthToken = credentials.OAuthToken;
            string oauthTokenSecret = credentials.OAuthTokenSecret;
            string screenName = credentials.ScreenName;
            ulong userID = credentials.UserID;

            var users =
                from tweet in twitterCtx.User
                where tweet.Type == UserType.Show &&
                      tweet.UserID == userID
                select tweet;


            var user = users.SingleOrDefault();
            oUser.TwitterOauthToken = oauthToken;
            oUser.TwitterOauthTokenSecret = oauthTokenSecret;
            oUser.TwitterScreenName = screenName;
            oUser.TwitterUserID = userID;
            oUser.TwitterProfileImageURL = user.ProfileImageUrl.Replace("_normal", "");

            oUser.Save(2);
        }
    }

    protected void btnSaveBio_Click(object sender, EventArgs e)
    {
        var oDecode = new za.co.idecode.test.idecode();
        XmlNode XmlResult = oDecode.LoadUser(Convert.ToInt16(Session["iUserID"].ToString()), "");
        string sFirstName = "", sLastName = "", sCurrentCity = "", sContactMobile = "", sContactOffice = "", sFaxNumber = "", sEmailAddress = "", sWebsiteAddress = "", sFacebookUsername = "", sTwitterUsername = "", sLinkedInUsername = "", sImageFormat = "", sTwitterProfileImageURL = "", sShortBiography = "", sBiography = "", sCurrentJobTitle = "", sCurrentJobPublication = "";
        string sPassword = "", sTwitterOauthToken = "", sTwitterOauthTokenSecret = "", sTwitterScreenName = "";
        int iUserID = 0, iGenderID = 0, iAge = 0, iCountryID = 0, iUserTypeID = 0, iBeatID = 0, iPackageID = 0;
        ulong iTwitterUserID = 0;
        bool bActive = false;
        DateTime dLastUpdateddate = DateTime.Now, dDateTimeStamp = DateTime.Now;

        foreach (XmlNode Nodes in XmlResult)
        {
            iUserID = Convert.ToInt16(Nodes["userid"].InnerText);
            sFirstName = Nodes["firstname"].InnerText;
            sLastName = Nodes["lastname"].InnerText;
            iGenderID = Convert.ToInt16(Nodes["genderid"].InnerText);
            iAge = Convert.ToInt16(Nodes["age"].InnerText);
            sCurrentCity = Nodes["currentcity"].InnerText;
            iCountryID = Convert.ToInt16(Nodes["countryid"].InnerText);
            sContactMobile = Nodes["contactmobile"].InnerText;
            sContactOffice = Nodes["contactoffice"].InnerText;
            sFaxNumber = Nodes["faxnumber"].InnerText;
            sEmailAddress = Nodes["emailaddress"].InnerText;
            sPassword = Nodes["password"].InnerText;
            sWebsiteAddress = Nodes["websiteaddress"].InnerText;
            bActive = Convert.ToBoolean(Nodes["active"].InnerText);
            dDateTimeStamp = Convert.ToDateTime(Nodes["datetimestamp"].InnerText);
            dLastUpdateddate = Convert.ToDateTime(Nodes["lastupdateddate"].InnerText);
            iUserTypeID = Convert.ToInt32(Nodes["usertypeid"].InnerText);
            sFacebookUsername = Nodes["facebookusername"].InnerText;
            sTwitterUsername = Nodes["twitterusername"].InnerText;
            sLinkedInUsername = Nodes["linkedinusername"].InnerText;
            sImageFormat = Nodes["imageformat"].InnerText;
            sTwitterOauthToken = Nodes["twitteroauthtoken"].InnerText;
            sTwitterOauthTokenSecret = Nodes["twitteroauthtokensecret"].InnerText;
            sTwitterScreenName = Nodes["twitterscreenname"].InnerText;
            sTwitterProfileImageURL = Nodes["twitterprofileimageurl"].InnerText;
            iTwitterUserID = Convert.ToUInt64(Nodes["twitteruserid"].InnerText);
            sTwitterProfileImageURL = Nodes["twitterprofileimageurl"].InnerText;
            sShortBiography = Nodes["shortbiography"].InnerText;
            sBiography = Nodes["biography"].InnerText;
            sCurrentJobTitle = Nodes["currentjobtitle"].InnerText;
            sCurrentJobPublication = Nodes["currentjobpublication"].InnerText;
            iBeatID = Convert.ToInt32(Nodes["beatid"].InnerText);
            iPackageID = Convert.ToInt32(Nodes["packageid"].InnerText);
        }

        if (upProImage.HasFile)
        {
            sImageFormat = System.IO.Path.GetExtension(upProImage.PostedFile.FileName).Replace(".","");
            upProImage.PostedFile.SaveAs(Server.MapPath("/app/images/profileimages/") + Convert.ToInt16(Session["iUserID"].ToString()) + "." + sImageFormat);

        }

        oDecode = new za.co.idecode.test.idecode();
        bool bSaveResult = oDecode.UpdateUser(Convert.ToInt16(Session["iUserID"].ToString()), txtFirstName.Text, txtLastName.Text, iGenderID, Convert.ToInt32(txtAge.Text), txtCurrentCity.Text, iCountryID, txtMobileNumber.Text, txtOfficeNumber.Text, txtFaxNumber.Text, txtEmailAddress.Text, sPassword, txtWebsiteAddress.Text, iUserTypeID, txtFacebookURL.Text, txtTwitterURL.Text, txtLinkedInURL.Text, sImageFormat, sTwitterOauthToken, sTwitterOauthTokenSecret, sTwitterScreenName, iTwitterUserID, sTwitterProfileImageURL, txtOneLineBio.Text, txtLongBiography.Text, txtCurrentJobTitle.Text, txtCurrentJobPublication.Text, iBeatID, iPackageID);
        Response.Redirect(Request.Url.AbsoluteUri);
    }
    protected void btnProcessArticleLink_Click(object sender, EventArgs e)
    {
        String url = txtArticleLink.Text;
        WebClient x = new WebClient();
        string sourcedata = x.DownloadString(url);
        txtArticleTitle.Text = Regex.Match(sourcedata, @"\<title\b[^>]*\>\s*(?<Title>[\s\S]*?)\</title\>", RegexOptions.IgnoreCase).Groups["Title"].Value;
        GetMetaTagValue(url);
        trArticleLinkURL.Visible = false;
        divArticleDetails.Visible = true;
    }
 

    protected void btnSaveUserArticle_Click(object sender, EventArgs e)
    {
        var oDecode = new za.co.idecode.test.idecode();
        bool bSaveUserArticle = oDecode.NewUserArticle(Convert.ToInt32(Session["iUserID"].ToString()), txtArticleTitle.Text, txtArticleMediaOutlet.Text, txtDescription.Text, txtArticleURL.Text, Convert.ToDateTime(txtArticleDatePublished.Text), "", "", Convert.ToBoolean(1), txtArticleImageURL.Text);
        dsUserArticles.DataBind();
        rptUserArticles.DataBind();
        trArticleLinkURL.Visible = true;
        divArticleDetails.Visible = false;
    }

    protected async void btnAuthenticateTwitter_Click(object sender, EventArgs e)
    {
        await auth.BeginAuthorizeAsync(Request.Url);
    }

    private void GetMetaTagValue(string url)
    {
        var getHtmlDoc = new HtmlWeb();
        var document = getHtmlDoc.Load(url);
        var metaTags = document.DocumentNode.SelectNodes("//meta");
        if (metaTags != null)
        {
            foreach (var sitetag in metaTags)
            {

                if (sitetag.Attributes["property"] != null && sitetag.Attributes["content"] != null && sitetag.Attributes["property"].Value == "og:title")
                {
                    txtArticleTitle.Text = sitetag.Attributes["content"].Value;
                }

                if (sitetag.Attributes["property"] != null && sitetag.Attributes["content"] != null && sitetag.Attributes["property"].Value == "og:description")
                {
                    txtDescription.Text = sitetag.Attributes["content"].Value;
                }


                if (sitetag.Attributes["property"] != null && sitetag.Attributes["content"] != null && sitetag.Attributes["property"].Value == "og:site_name")
                {
                    txtArticleMediaOutlet.Text = sitetag.Attributes["content"].Value;
                }
                //For EyeWitnessNews
                if (sitetag.Attributes["name"] != null && sitetag.Attributes["content"] != null && sitetag.Attributes["name"].Value == "twitter:app:name:iphone")
                {
                    txtArticleMediaOutlet.Text = sitetag.Attributes["content"].Value;
                }
                if (sitetag.Attributes["property"] != null && sitetag.Attributes["content"] != null && sitetag.Attributes["property"].Value == "og:url")
                {
                    txtArticleURL.Text = sitetag.Attributes["content"].Value;
                }
                

                if (sitetag.Attributes["name"] != null && sitetag.Attributes["content"] != null && sitetag.Attributes["name"].Value == "publicationdate")
                {
                    txtArticleDatePublished.Text = sitetag.Attributes["content"].Value;
                }
                //For EyeWitnessNews
                if (sitetag.Attributes["name"] != null && sitetag.Attributes["content"] != null && sitetag.Attributes["name"].Value == "twitter:url")
                {
                    txtArticleURL.Text = sitetag.Attributes["content"].Value;
                }

                if (sitetag.Attributes["property"] != null && sitetag.Attributes["content"] != null && sitetag.Attributes["property"].Value == "og:image")
                {
                    txtArticleImageURL.Text = sitetag.Attributes["content"].Value;
                }
            }
        }
    }

}